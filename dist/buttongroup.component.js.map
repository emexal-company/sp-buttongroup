{"version":3,"file":"buttongroup.component.js","sourceRoot":"","sources":["../src/buttongroup.component.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,aAAa,CAAC;AAE7D,OAAO,EAAE,IAAI,EAAE,MAAM,mBAAmB,CAAC;AAEzC,OAAO,EAAE,MAAM,EAAE,MAAM,qBAAqB,CAAC;AAE7C,OAAO,WAAW,MAAM,sBAAsB,CAAC;AAC/C,OAAO,gBAAgB,MAAM,wBAAwB,CAAC;AAItD,IAAa,WAAW,GAAxB,MAAa,WAAY,SAAQ,IAAI;IAArC;;QAGsC,aAAQ,GAAY,KAAK,CAAC;IA0BhE,CAAC;IAvBW,MAAM;QACd,OAAO,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACrC,CAAC;IAES,UAAU;QAClB,OAAQ,IAAI,CAAC,OAA2B;aACrC,aAAa,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;aAChC,MAAM,CAAC,CAAC,CAAO,EAAE,EAAE,CAAC,CAAC,YAAY,MAAM,CAAoB,CAAC;IACjE,CAAC;IAES,gBAAgB;QACxB,IAAI,IAAI,CAAC,OAAO,EAAE;YAChB,IAAI,CAAC,UAAU,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAS,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,UAAU,GAAG,gGAAgG,CAAC,CAAC;SAC1K;IACH,CAAC;IAES,WAAW,CAAC,CAAa;QACjC,MAAM,cAAc,GAAG,CAAC,CAAC,YAAY,EAAE,CAAC,MAAM,CAAC,CAAC,CAAc,EAAE,EAAE,CAAC,CAAC,YAAY,MAAM,CAAoB,CAAC;QAC3G,IAAI,CAAC,cAAc,CAAC,MAAM,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE;YAClE,IAAI,CAAC,UAAU,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,GAAG,CAAC,CAAC,KAAK,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;SAC1E;IACH,CAAC;CAEF,CAAA;AA5Be,2BAAe,GAAG,WAAW,CAAC;AAEf;IAA5B,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;;6CAAkC;AAC/C;IAAd,KAAK,CAAC,MAAM,CAAC;8BAAqB,WAAW;4CAAC;AAJpC,WAAW;IADvB,aAAa,CAAC,gBAAgB,CAAC;GACnB,WAAW,CA6BvB;SA7BY,WAAW","sourcesContent":["import { customElement, property, query } from 'lit-element';\r\n\r\nimport { Base } from '@spectrum/sp-base';\r\n\r\nimport { Button } from '@spectrum/sp-button';\r\n\r\nimport labelStyles from './buttongroup.styles';\r\nimport standardTemplate from './buttongroup.template';\r\nimport { StringDecoder } from 'string_decoder';\r\n\r\n@customElement('sp-buttongroup')\r\nexport class Buttongroup extends Base {\r\n  public static componentStyles = labelStyles;\r\n\r\n  @property({ type: Boolean }) public vertical: boolean = false;\r\n  @query('slot') protected buttons!: HTMLElement;\r\n\r\n  protected render() {\r\n    return standardTemplate.call(this);\r\n  }\r\n\r\n  protected getButtons(): Button[] {\r\n    return (this.buttons as HTMLSlotElement)\r\n      .assignedNodes({ flatten: true })\r\n      .filter((e: Node) => e instanceof Button) as any as Button[];\r\n  }\r\n\r\n  protected handleSlotChange() {\r\n    if (this.buttons) {\r\n      this.getButtons().slice(1).forEach((b: Button) => b.style.marginLeft = 'var(--spectrum-actionbuttongroup-text-button-gap-x, var(--spectrum-global-dimension-size-100))');\r\n    }\r\n  }\r\n\r\n  protected handleClick(e: MouseEvent) {\r\n    const clickedButtons = e.composedPath().filter((t: EventTarget) => t instanceof Button) as any as Button[];\r\n    if ((clickedButtons.length === 1) && (!clickedButtons[0].disabled)) {\r\n      this.getButtons().forEach((b) => b.selected = (b === clickedButtons[0]));\r\n    }\r\n  }\r\n\r\n}\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    'sp-buttongroup': Buttongroup;\r\n  }\r\n}\r\n"]}